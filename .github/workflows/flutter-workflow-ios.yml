name: "ChaseApp - iOS"
on:
  push:
    branches:
      - master
    # tags:
    #   - "v*"
jobs:
  # build:
  #   runs-on: [self-hosted, macOS]
  #   steps:
  #     # - run: security delete-keychain /Users/user/Library/Keychains/signing_temp.keychain-db

  #     #     sudo xcode-select -s /Applications/Xcode_14.0.app/Contents/Developer
  #     #     xcode-select -v

  #     - name: Checkout repository
  #       uses: actions/checkout@v2

  #     - uses: actions/setup-java@v2
  #       with:
  #         distribution: "zulu"
  #         java-version: "11"
  #     # - name: Setup Xcode
  #     #   uses: maxim-lobanov/setup-xcode@v1
  #     #   with:
  #     #     xcode-version: "14.0"
  #     - run: /usr/bin/xcodebuild -version

  #     - name: Setup Flutter
  #       uses: subosito/flutter-action@v2
  #       with:
  #         flutter-version: "3.3.3"
  #         architecture: x64
  #     # Install Development Certificate

  #     - name: Install Development Certificate
  #       uses: apple-actions/import-codesign-certs@v1
  #       with:
  #         keychain-password: NWADNQWJ
  #         p12-file-base64: ${{ secrets.APPSTORE_CERT_BASE64 }}
  #         p12-password: ${{ secrets.APPLE_DEV_CERTIFICATE_PASSWORD }}

  #     - name: Install Distribution Certificate
  #       uses: apple-actions/import-codesign-certs@v1
  #       with:
  #         create-keychain: false
  #         keychain-password: NWADNQWJ
  #         p12-file-base64: ${{ secrets.APPSTORE_DISTRO_CERT_BASE64 }}
  #         p12-password: ${{ secrets.APPSTORE_CERT_PASSWORD }}

  #     # Install the Apple certificate and provisioning profile
  #     #download provisioning profiles
  #     - name: "Download Dev Provisioning Profiles for Flutter target"
  #       id: provisioning1
  #       uses: apple-actions/download-provisioning-profiles@v1
  #       with:
  #         bundle-id: "com.carverauto.chaseapp"
  #         profile-type: "IOS_APP_DEVELOPMENT"
  #         issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
  #         api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
  #         api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}

  #     - name: "Download Dev Provisioning Profiles for AppImageNotification target"
  #       id: provisioning2
  #       uses: apple-actions/download-provisioning-profiles@v1
  #       with:
  #         bundle-id: "com.carverauto.chaseapp.AppImageNotification"
  #         profile-type: "IOS_APP_DEVELOPMENT"
  #         issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
  #         api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
  #         api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}

  #     - name: "Download Distribution Provisioning Profiles for Flutter target"
  #       id: provisioning3
  #       uses: apple-actions/download-provisioning-profiles@v1
  #       with:
  #         bundle-id: "com.carverauto.chaseapp"
  #         profile-type: "IOS_APP_STORE"
  #         issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
  #         api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
  #         api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}

  #     - name: "Download Distribution Provisioning Profiles for AppImageNotification target"
  #       id: provisioning4
  #       uses: apple-actions/download-provisioning-profiles@v1
  #       with:
  #         bundle-id: "*"
  #         profile-type: "IOS_APP_STORE"
  #         issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
  #         api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
  #         api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
  #     - run: echo ls $RUNNER_TEMP/*.mobileprovision

  #     - name: "Add AppStore exportoptions list"
  #       env:
  #         APPSTORE_EXPORT_OPTIONS_PLIST_BASE64: ${{ secrets.APPSTORE_EXPORT_OPTIONS_PLIST_BASE64 }}
  #       run: echo -n "$APPSTORE_EXPORT_OPTIONS_PLIST_BASE64" | base64 --decode --output ./ExportOptions.plist

  #     - name: "Add Firebase GoogleServices info plist"
  #       env:
  #         SERVICES_PLIST_BASE64: ${{ secrets.GOOGLESERVICES_IOS_BASE64 }}
  #       run: echo -n "$SERVICES_PLIST_BASE64" | base64 --decode --output ios/config/prod/GoogleService-Info.plist

  #     # - name: Install the Apple certificate and provisioning profile
  #     #   env:
  #     #     BUILD_CERTIFICATE_BASE64: ${{ secrets.APPSTORE_CERT_BASE64 }}
  #     #     DISTRO_CERTIFICATE_BASE64: ${{ secrets.APPSTORE_DISTRO_CERT_BASE64 }}
  #     #     APPLE_DEV_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_DEV_CERTIFICATE_PASSWORD }}
  #     #     P12_PASSWORD: ${{ secrets.APPSTORE_CERT_PASSWORD }}
  #     #     BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
  #     #     BUILD_APPIMAGE_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_APPIMAGE_PROVISION_PROFILE_BASE64 }}
  #     #     APPSTORE_DISTRIBUTION_WILDCARD_PROVISION_PROFILE_BASE64: ${{ secrets.APPSTORE_DISTRIBUTION_WILDCARD_PROVISION_PROFILE_BASE64 }}
  #     #     # BUILD_PROVISION_PROFILE_2_BASE64: ${{ secrets.MOBILEPROVISION_2_BASE64 }}
  #     #     # BUILD_PROVISION_PROFILE_3_BASE64: ${{ secrets.MOBILEPROVISION_3_BASE64 }}
  #     #     # BUILD_PROVISION_PROFILE_4_BASE64: ${{ secrets.MOBILEPROVISION_4_BASE64 }}
  #     #     SERVICES_PLIST_BASE64: ${{ secrets.GOOGLESERVICES_IOS_BASE64 }}
  #     #     KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
  #     #     Pusher_Instance_Id: ${{ secrets.PROD_PUSHER_INSTANCE_ID }}
  #     #     GetStream_Chat_Api_Key: ${{ secrets.PROD_GETSTREAM_CHAT_API_KEY }}
  #     #     Twitter_Token: ${{ secrets.TWITTER_TOKEN }}
  #     #     Twitter_Api_key: ${{ secrets.TWITTER_API_KEY }}
  #     #     Twitter_Secret_key: ${{ secrets.TWITTER_SECRET_KEY }}
  #     #     Youtube_Token: ${{ secrets.YOUTUBE_TOKEN }}
  #     #     Youtbe_Api_Key: ${{ secrets.YOUTUBE_API_KEY }}
  #     #   run: |

  #     #     # Install the Apple certificate and provisioning profile
  #     #     # create variables
  #     #     PP_PATH=$RUNNER_TEMP/*.mobileprovision
  #     #     CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
  #     #     DISTRIBUTION_CERTIFICATE_PATH=$RUNNER_TEMP/sign_certificate.p12
  #     #     KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

  #     #     # echo Firebase services file
  #     #     echo -n "$SERVICES_PLIST_BASE64" | base64 --decode --output ios/config/prod/GoogleService-Info.plist

  #     #     # import certificate and provisioning profile from secrets

  #     #     echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
  #     #     echo -n "$DISTRO_CERTIFICATE_BASE64" | base64 --decode --output $DISTRIBUTION_CERTIFICATE_PATH
  #     #     echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $RUNNER_TEMP/build_pp.mobileprovision
  #     #     echo -n "$BUILD_APPIMAGE_PROVISION_PROFILE_BASE64" | base64 --decode --output $RUNNER_TEMP/build_appimage_pp.mobileprovision
  #     #     echo -n "$APPSTORE_DISTRIBUTION_WILDCARD_PROVISION_PROFILE_BASE64" | base64 --decode --output $RUNNER_TEMP/distribution_wildcard_pp.mobileprovision
  #     #     # echo -n "$BUILD_PROVISION_PROFILE_2_BASE64" | base64 --decode --output $RUNNER_TEMP/2.mobileprovision
  #     #     # echo -n "$BUILD_PROVISION_PROFILE_3_BASE64" | base64 --decode --output $RUNNER_TEMP/3.mobileprovision
  #     #     # echo -n "$BUILD_PROVISION_PROFILE_4_BASE64" | base64 --decode --output $RUNNER_TEMP/4.mobileprovision

  #     #     # # create temporary keychain

  #     #     security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
  #     #     security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
  #     #     security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

  #     #     # # import certificate to keychain

  #     #     security import $CERTIFICATE_PATH -P "$APPLE_DEV_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
  #     #     security import $DISTRIBUTION_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
  #     #     security list-keychain -d user -s $KEYCHAIN_PATH

  #     #     # apply provisioning profile

  #     #     # mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
  #     #     # cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
  #     #     # echo ls $RUNNER_TEMP/*.mobileprovision
  #     #     # for PROVISION in `ls $RUNNER_TEMP/*.mobileprovision`
  #     #     # do
  #     #     #   UUID=`/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< $(security cms -D -i $PROVISION)`
  #     #     #   echo "$PROVISION"
  #     #     #   cp $PROVISION ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
  #     #     # done
  #     #     # echo ls ~/Library/MobileDevice/Provisioning\ Profiles

  #     # Running Flutter clean
  #     - run: |
  #         flutter clean
  #         flutter pub get
  #         cd ios
  #         # pod repo update
  #         pod update Firebase/Auth
  #         # pod install --repo-update
  #         cd ..

  #     # Install your project's dependencies
  #     - run: flutter pub get

  #     # Build and sign the ipa using a single flutter command
  #     - name: Building IPA
  #       run: flutter build ipa --flavor prod --target lib/main_prod.dart --export-options-plist=./ExportOptions.plist --dart-define=Pusher_Instance_Id="$Pusher_Instance_Id" --dart-define=GetStream_Chat_Api_Key="$GetStream_Chat_Api_Key" --dart-define=Twitter_Token="$Twitter_Token" --dart-define=Twitter_Api_key="$Twitter_Api_key" --dart-define=Twitter_Secret_key="$Twitter_Secret_key" --dart-define=Youtube_Token="$Youtube_Token" --dart-define=Youtbe_Api_Key="$Youtbe_Api_Key"

  #     # Collect the file and upload as artifact
  #     - name: collect ipa artifacts
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: chaseapp.ipa
  #         path: build/ios/ipa/*.ipa

  #     - name: Clean up keychain and provisioning profile
  #       if: ${{ always() }}
  #       run: |
  #         rm ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision
  #         # security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
  #         security delete-keychain /Users/user/Library/Keychains/signing_temp.keychain-db

  testflight-upload:
    # needs: [build]
    runs-on: [self-hosted, macOS]
    env:
      # APP_STORE_CONNECT_USERNAME: ${{ secrets.APP_STORE_CONNECT_USERNAME }}
      # APP_STORE_CONNECT_PASSWORD: ${{ secrets.APP_STORE_CONNECT_PASSWORD }}
      issuer_id: ${{ secrets.APPSTORE_ISSUER_ID }}
      api_key_id: ${{ secrets.APPSTORE_KEY_ID }}
      api_private_key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
      GH_TOKEN: ${{secrets.CHASEAPP_GITHUB_TOKEN}}
    steps:
      # - uses: actions/download-artifact@master
      #   with:
      #     name: chaseapp.ipa

      - run: |
          mkdir -p ~/private_keys/
          # echo -n "$api_private_key" | base64 --decode --output ~/private_keys/AuthKey_Github_deployment.p8
          echo "$api_private_key" > ~/private_keys/AuthKey_Github_deployment.p8

      - uses: dawidd6/action-download-artifact@v2.23.0
        with:
          github_token: ${{secrets.CHASEAPP_GITHUB_TOKEN}}
          run_id: 3189992801
          name: chaseapp.ipa
      - run: |

          xcrun altool --upload-app -t ios -f "chaseapp.ipa" --apiKey "Github_deployment" --apiIssuer "$issuer_id"
          #  -u "$APP_STORE_CONNECT_USERNAME" -p "$APP_STORE_CONNECT_PASSWORD"

#   Release job, upload the ipa to Firebase App Distribution
#  release:
#    name: Release ipa to Firebase
#    needs: [ build ]
#    runs-on: ubuntu-latest
#    steps:
#
#     Retrieve ipa file from GitHub artifacts
#    - uses: actions/checkout@v2
#    - name: Get release-ipa from artifacts
#      uses: actions/download-artifact@v2
#      with:
#        name: release-ipa
#
#     Upload ipa file to Fiebase
#    - name: Upload artifact to Firebase App Distribution
#      uses: wzieba/Firebase-Distribution-Github-Action@v1
#      with:
#        appId: ${{secrets.FIREBASE_IOS_APP_ID}}
#        token: ${{secrets.FIREBASE_TOKEN}}
#        groups: ios-developers
#        file: {your_app_name}.ipa
