name: "ChaseApp - iOS"
on:
  push:
    branches:
      - master
    
jobs:
  build:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Install the Apple certificate and provisioning profile 
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPSTORE_CERT_BASE64 }}
          P12_PASSWORD: ${{ secrets.APPSTORE_CERT_PASSWORD }}
          BUILD_PROVISION_PROFILE_1_BASE64: ${{ secrets.MOBILEPROVISION_1_BASE64 }}
          BUILD_PROVISION_PROFILE_2_BASE64: ${{ secrets.MOBILEPROVISION_2_BASE64 }}
          BUILD_PROVISION_PROFILE_3_BASE64: ${{ secrets.MOBILEPROVISION_3_BASE64 }}
          BUILD_PROVISION_PROFILE_4_BASE64: ${{ secrets.MOBILEPROVISION_4_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          KEYCHAIN_PATH: /tmp/app-signing.keychain-db
          PP_PATH: /tmp/*.mobileprovision
          CERTIFICATE_PATH: /tmp/build_certificate.p12
        run: |
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_1_BASE64" | base64 --decode --output /tmp/1.mobileprovision
          echo -n "$BUILD_PROVISION_PROFILE_2_BASE64" | base64 --decode --output /tmp/2.mobileprovision
          echo -n "$BUILD_PROVISION_PROFILE_3_BASE64" | base64 --decode --output /tmp/3.mobileprovision
          echo -n "$BUILD_PROVISION_PROFILE_4_BASE64" | base64 --decode --output /tmp/4.mobileprovision
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      
      # Install flutter
      - name: Flutter get
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.0.5'
          architecture: x64

      # Install your project's dependencies
      - run: flutter pub get

      # Build and sign the ipa using a single flutter command
      - name: Building IPA
        run: flutter build ipa --flavor prod --target lib/main_prod.dart --dart-define=Prod_Pusher_Instance_Id=4asdfasdf33 --dart-define=Prod_GetStream_Chat_Api_Key=sadfasdf
          
      # Collect the file and upload as artifact         
      - name: collect ipa artifacts
        uses: actions/upload-artifact@v2
        with:
          path: build/ios/ipa/*.ipa

      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
  
#   Release job, upload the ipa to Firebase App Distribution
#  release:
#    name: Release ipa to Firebase
#    needs: [ build ]
#    runs-on: ubuntu-latest
#    steps:
#    
#     Retrieve ipa file from GitHub artifacts
#    - uses: actions/checkout@v2
#    - name: Get release-ipa from artifacts
#      uses: actions/download-artifact@v2
#      with:
#        name: release-ipa
#
#     Upload ipa file to Fiebase
#    - name: Upload artifact to Firebase App Distribution
#      uses: wzieba/Firebase-Distribution-Github-Action@v1
#      with:
#        appId: ${{secrets.FIREBASE_IOS_APP_ID}}
#        token: ${{secrets.FIREBASE_TOKEN}}
#        groups: ios-developers
#        file: {your_app_name}.ipa