name: "ChaseApp - iOS"
on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: [self-hosted, macOS]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Install the Apple certificate and provisioning profile
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPSTORE_CERT_BASE64 }}
          DISTRO_CERTIFICATE_BASE64: ${{ secrets.APPSTORE_DISTRO_CERT_BASE64 }}
          P12_PASSWORD: ${{ secrets.APPSTORE_CERT_PASSWORD }}
          BUILD_PROVISION_PROFILE_1_BASE64: ${{ secrets.MOBILEPROVISION_1_BASE64 }}
          BUILD_PROVISION_PROFILE_2_BASE64: ${{ secrets.MOBILEPROVISION_2_BASE64 }}
          BUILD_PROVISION_PROFILE_3_BASE64: ${{ secrets.MOBILEPROVISION_3_BASE64 }}
          BUILD_PROVISION_PROFILE_4_BASE64: ${{ secrets.MOBILEPROVISION_4_BASE64 }}
          SERVICES_PLIST_BASE64: ${{ secrets.GOOGLESERVICES_IOS_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          KEYCHAIN_PATH: /tmp/app-signing.keychain-db
          PP_PATH: /tmp/*.mobileprovision
          CERTIFICATE_PATH: /tmp/build_certificate.p12
          Pusher_Instance_Id: ${{ secrets.PROD_PUSHER_INSTANCE_ID }}
          GetStream_Chat_Api_Key: ${{ secrets.PROD_GETSTREAM_CHAT_API_KEY }}
          Twitter_Token: ${{ secrets.TWITTER_TOKEN }}
          Twitter_Api_key: ${{ secrets.TWITTER_API_KEY }}
          Twitter_Secret_key: ${{ secrets.TWITTER_SECRET_KEY }}
          Youtube_Token: ${{ secrets.YOUTUBE_TOKEN }}
          Youtbe_Api_Key: ${{ secrets.YOUTUBE_API_KEY }}
        run: |
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$DISTRO_CERTIFICATE_BASE64" | base64 --decode --output /tmp/sign_certificate.p12
          echo -n "$BUILD_PROVISION_PROFILE_1_BASE64" | base64 --decode --output /tmp/1.mobileprovision
          echo -n "$BUILD_PROVISION_PROFILE_2_BASE64" | base64 --decode --output /tmp/2.mobileprovision
          echo -n "$BUILD_PROVISION_PROFILE_3_BASE64" | base64 --decode --output /tmp/3.mobileprovision
          echo -n "$BUILD_PROVISION_PROFILE_4_BASE64" | base64 --decode --output /tmp/4.mobileprovision
          echo -n "$SERVICES_PLIST_BASE64" | base64 --decode --output ios/config/prod/GoogleService-Info.plist
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import /tmp/sign_certificate.p12 -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      # Install flutter
      - name: Flutter get
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.0.5"
          architecture: x64

      # Install your project's dependencies
      - run: flutter pub get

      # Build and sign the ipa using a single flutter command
      - name: Building IPA
        run: flutter build ipa --flavor prod --target lib/main_prod.dart --dart-define=Pusher_Instance_Id="$Pusher_Instance_Id" --dart-define=GetStream_Chat_Api_Key="$GetStream_Chat_Api_Key" --dart-define=Twitter_Token="$Twitter_Token" --dart-define=Twitter_Api_key="$Twitter_Api_key" --dart-define=Twitter_Secret_key="$Twitter_Secret_key" --dart-define=Youtube_Token="$Youtube_Token" --dart-define=Youtbe_Api_Key="$Youtbe_Api_Key"

      # Collect the file and upload as artifact
      - name: collect ipa artifacts
        uses: actions/upload-artifact@v2
        with:
          path: build/ios/ipa/*.ipa

      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain /tmp/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision

  testflight-upload:
    needs: [build]
    runs-on: "macos-latest"
    env:
      APP_STORE_CONNECT_USERNAME: ${{ secrets.APP_STORE_CONNECT_USERNAME }}
      APP_STORE_CONNECT_PASSWORD: ${{ secrets.APP_STORE_CONNECT_PASSWORD }}
      GH_TOKEN: ${{secrets.GIT_TOKEN}}
    steps:
      - uses: actions/download-artifact@master
        with:
          name: pong.ipa
      # - uses: dawidd6/action-download-artifact@v2.23.0
      #   with:
      #     github_token: ${{secrets.GIT_TOKEN}}
      #     run_id: 3071273970
      #     name: pong.ipa
      - run: |
          xcrun altool --upload-app -t ios -f "pong.ipa" -u "$APP_STORE_CONNECT_USERNAME" -p "$APP_STORE_CONNECT_PASSWORD"

#   Release job, upload the ipa to Firebase App Distribution
#  release:
#    name: Release ipa to Firebase
#    needs: [ build ]
#    runs-on: ubuntu-latest
#    steps:
#
#     Retrieve ipa file from GitHub artifacts
#    - uses: actions/checkout@v2
#    - name: Get release-ipa from artifacts
#      uses: actions/download-artifact@v2
#      with:
#        name: release-ipa
#
#     Upload ipa file to Fiebase
#    - name: Upload artifact to Firebase App Distribution
#      uses: wzieba/Firebase-Distribution-Github-Action@v1
#      with:
#        appId: ${{secrets.FIREBASE_IOS_APP_ID}}
#        token: ${{secrets.FIREBASE_TOKEN}}
#        groups: ios-developers
#        file: {your_app_name}.ipa

# name: "ChaseApp - iOS"
# on:
#   push:
#     branches:
#       - staging
#     # tags:
#     #   - "v*"

# jobs:
#   build:
#     runs-on: [self-hosted, macOS]
#     steps:
#       - name: Checkout repository
#       - uses: actions/checkout@v2

#       # Install the Apple certificate and provisioning profile
#       - name: Install the Apple certificate and provisioning profile
#         env:
#           BUILD_CERTIFICATE_BASE64: ${{ secrets.APPSTORE_CERT_BASE64 }}
#           DISTRO_CERTIFICATE_BASE64: ${{ secrets.APPSTORE_DISTRO_CERT_BASE64 }}
#           P12_PASSWORD: ${{ secrets.APPSTORE_CERT_PASSWORD }}
#           BUILD_PROVISION_PROFILE_1_BASE64: ${{ secrets.MOBILEPROVISION_1_BASE64 }}
#           BUILD_PROVISION_PROFILE_2_BASE64: ${{ secrets.MOBILEPROVISION_2_BASE64 }}
#           BUILD_PROVISION_PROFILE_3_BASE64: ${{ secrets.MOBILEPROVISION_3_BASE64 }}
#           BUILD_PROVISION_PROFILE_4_BASE64: ${{ secrets.MOBILEPROVISION_4_BASE64 }}
#           SERVICES_PLIST_BASE64: ${{ secrets.GOOGLESERVICES_IOS_BASE64 }}
#           KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
#           KEYCHAIN_PATH: /tmp/app-signing.keychain-db
#           PP_PATH: /tmp/*.mobileprovision
#           CERTIFICATE_PATH: /tmp/build_certificate.p12
#           Pusher_Instance_Id: ${{ secrets.PROD_PUSHER_INSTANCE_ID }}
#           GetStream_Chat_Api_Key: ${{ secrets.PROD_GETSTREAM_CHAT_API_KEY }}
#           Twitter_Token: ${{ secrets.TWITTER_TOKEN }}
#           Twitter_Api_key: ${{ secrets.TWITTER_API_KEY }}
#           Twitter_Secret_key: ${{ secrets.TWITTER_SECRET_KEY }}
#           Youtube_Token: ${{ secrets.YOUTUBE_TOKEN }}
#           Youtbe_Api_Key: ${{ secrets.YOUTUBE_API_KEY }}
#       - run: echo -n "$SERVICES_PLIST_BASE64" | base64 --decode --output ios/config/prod/GoogleService-Info.plist
#       - run: |
#           # import certificate and provisioning profile from secrets
#           echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
#           echo -n "$DISTRO_CERTIFICATE_BASE64" | base64 --decode --output /tmp/sign_certificate.p12
#           echo -n "$BUILD_PROVISION_PROFILE_1_BASE64" | base64 --decode --output /tmp/1.mobileprovision
#           echo -n "$BUILD_PROVISION_PROFILE_2_BASE64" | base64 --decode --output /tmp/2.mobileprovision
#           echo -n "$BUILD_PROVISION_PROFILE_3_BASE64" | base64 --decode --output /tmp/3.mobileprovision
#           echo -n "$BUILD_PROVISION_PROFILE_4_BASE64" | base64 --decode --output /tmp/4.mobileprovision
#           # create temporary keychain
#           security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#           security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
#           security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#           # import certificate to keychain
#           security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
#           security import /tmp/sign_certificate.p12 -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
#           security list-keychain -d user -s $KEYCHAIN_PATH
#           # apply provisioning profile
#           mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
#           cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

#       # Install flutter
#       - name: Flutter get
#       - uses: subosito/flutter-action@v2
#         with:
#           flutter-version: "3.0.5"
#           architecture: x64

#       # Install your project's dependencies
#       - run: flutter pub get

#       # Build and sign the ipa using a single flutter command
#       - name: Building IPA
#       - run: flutter build ipa --flavor prod --target lib/main_prod.dart --dart-define=Pusher_Instance_Id="$Pusher_Instance_Id" --dart-define=GetStream_Chat_Api_Key="$GetStream_Chat_Api_Key" --dart-define=Twitter_Token="$Twitter_Token" --dart-define=Twitter_Api_key="$Twitter_Api_key" --dart-define=Twitter_Secret_key="$Twitter_Secret_key" --dart-define=Youtube_Token="$Youtube_Token" --dart-define=Youtbe_Api_Key="$Youtbe_Api_Key"

#       # Collect the file and upload as artifact
#       - name: collect ipa artifacts
#       - uses: actions/upload-artifact@v2
#         with:
#           path: build/ios/ipa/*.ipa

#       - name: Clean up keychain and provisioning profile
#         if: ${{ always() }}
#       - run: |
#           security delete-keychain /tmp/app-signing.keychain-db
#           rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision

#   testflight-upload:
#     needs: [build]
#     runs-on: "macos-latest"
#     env:
#       APP_STORE_CONNECT_USERNAME: ${{ secrets.APP_STORE_CONNECT_USERNAME }}
#       APP_STORE_CONNECT_PASSWORD: ${{ secrets.APP_STORE_CONNECT_PASSWORD }}
#       GH_TOKEN: ${{secrets.GIT_TOKEN}}
#     steps:
#       - uses: actions/download-artifact@master
#         with:
#           name: pong.ipa
#       # - uses: dawidd6/action-download-artifact@v2.23.0
#       #   with:
#       #     github_token: ${{secrets.GIT_TOKEN}}
#       #     run_id: 3071273970
#       #     name: pong.ipa
#       - run: |
#           xcrun altool --upload-app -t ios -f "pong.ipa" -u "$APP_STORE_CONNECT_USERNAME" -p "$APP_STORE_CONNECT_PASSWORD"

# #   Release job, upload the ipa to Firebase App Distribution
# #  release:
# #    name: Release ipa to Firebase
# #    needs: [ build ]
# #    runs-on: ubuntu-latest
# #    steps:
# #
# #     Retrieve ipa file from GitHub artifacts
# #    - uses: actions/checkout@v2
# #    - name: Get release-ipa from artifacts
# #      uses: actions/download-artifact@v2
# #      with:
# #        name: release-ipa
# #
# #     Upload ipa file to Fiebase
# #    - name: Upload artifact to Firebase App Distribution
# #      uses: wzieba/Firebase-Distribution-Github-Action@v1
# #      with:
# #        appId: ${{secrets.FIREBASE_IOS_APP_ID}}
# #        token: ${{secrets.FIREBASE_TOKEN}}
# #        groups: ios-developers
# #        file: {your_app_name}.ipa
