def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new FileNotFoundException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '79'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.4.9'
}

apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'com.google.firebase.crashlytics'

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    flavorDimensions "flavor-type"

    productFlavors {
        prod {
            dimension "flavor-type"
            applicationId "com.carverauto.chaseapp"
           
        }
        dev {
            dimension "flavor-type"
            applicationId "com.carverauto.chasedev"
           
        }
    }
    compileSdkVersion 33

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "com.carverauto.chaseapp"
        minSdkVersion 23
        targetSdkVersion 33
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile file("../key.jks")
            storePassword = "$System.env.KEY_PASSWORD"
            keyAlias = "$System.env.ALIAS"
            keyPassword = "$System.env.ALIAS_PASSWORD"
        //    keyAlias keystoreProperties['keyAlias']
        //    keyPassword keystoreProperties['keyPassword']
        //    storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
        //    storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            // other configs
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation platform('com.google.firebase:firebase-bom:29.0.3')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'org.slf4j:slf4j-simple:1.7.30'
    // implementation 'io.nodle:nodlesdk-rc-lp:92bd58f9e2'
    implementation "com.algolia:algoliasearch-client-kotlin:1.12.0"
    implementation "io.ktor:ktor-client-okhttp:1.6.4"
    implementation 'com.pusher:pusher-java-client:2.2.8'
    
}
